
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001d9  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000128  00000000  00000000  00000415  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000190  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ad  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b3  00000000  00000000  000008dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_1>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
enum estado osc_estado;


int main(void)
{
    DDRB=1<<PORTB5;
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	84 b9       	out	0x04, r24	; 4
	EIMSK=(1<<INT1)|(1<<INT0);	// INT0 set, INT1 reset
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	8d bb       	out	0x1d, r24	; 29
	EICRA=(1<<ISC00)|(1<<ISC01)|(1<<ISC10)|(1<<ISC11);		
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	
	sei();					// Activación global de interrupciones
  9e:	78 94       	sei
	
		
    while (1) 
    {		
		switch(osc_estado)
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a4:	88 23       	and	r24, r24
  a6:	61 f0       	breq	.+24     	; 0xc0 <main+0x30>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	81 ee       	ldi	r24, 0xE1	; 225
  b0:	94 e0       	ldi	r25, 0x04	; 4
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x22>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x2c>
  bc:	00 00       	nop
  be:	f0 cf       	rjmp	.-32     	; 0xa0 <main+0x10>
			{
			case desactivado:
				_delay_ms(100); //instrucción dummy, para evitar que optimizacion quite estado
				break;
			case activado:
				PORTB|=1<<PORTB5;
  c0:	2d 9a       	sbi	0x05, 5	; 5
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	97 e2       	ldi	r25, 0x27	; 39
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x38>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x42>
  d2:	00 00       	nop
				_delay_ms(800);
				PORTB&=~(1<<PORTB5);
  d4:	2d 98       	cbi	0x05, 5	; 5
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	83 ec       	ldi	r24, 0xC3	; 195
  da:	99 e0       	ldi	r25, 0x09	; 9
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x4c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x56>
  e6:	00 00       	nop
  e8:	db cf       	rjmp	.-74     	; 0xa0 <main+0x10>

000000ea <__vector_1>:
			}
    }
}

ISR (INT0_vect) // Rutina de Servicio de Interrupción
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
	osc_estado=activado;
  f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	EIFR&=~(1<<INTF0);
  f8:	e0 98       	cbi	0x1c, 0	; 28
}
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_2>:

ISR (INT1_vect) // Rutina de Servicio de Interrupción
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
	osc_estado=desactivado;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	EIFR&=~(1<<INTF1);	
 116:	e1 98       	cbi	0x1c, 1	; 28
}
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
