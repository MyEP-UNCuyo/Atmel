
EJ07_Blink_Delay_SR_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000017c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000018a  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000116  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000180  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b2  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
enum estado{activado,desactivado};
enum estado osc_estado;

int main(void)
{
    DDRB=1<<PORTB5;					// PORTB5 está definido en iom328p.h como 5. Es simplemente 1<<5
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	84 b9       	out	0x04, r24	; 4
	
	PCICR|=1<<PCIE0;				  //PCIE0 habilita PCINT 0..7 (PORTB), PCIE1 PCINT 8..14 (PORTC) etc
  94:	e8 e6       	ldi	r30, 0x68	; 104
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	80 83       	st	Z, r24
	PCMSK0 = (1<<PORTB3)|(1<<PORTB4); //Dentro de PORTB se habilita interrupción por cambio en PCINT3 o PCINT4
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	osc_estado=activado;			  
  a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	sei();							  // Activación global de interrupciones
  a8:	78 94       	sei
	
    while (1)					// Con respecto al EJ06, el polling de ACT y DES se efectúa en la
    {							// rutina de interrupción (para individualizar bit), no en el programa principal
		switch(osc_estado)
  aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ae:	81 11       	cpse	r24, r1
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x1e>
			{
			case desactivado:
				break;
			case activado:
				PORTB|=1<<PORTB5;		// Equivale a PORTB=PINB|00100000
  b2:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	97 e2       	ldi	r25, 0x27	; 39
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x2a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x34>
  c4:	00 00       	nop
				_delay_ms(800);
				PORTB&=~(1<<PORTB5);	// Equivale a PORTB=PINB&11011111
  c6:	2d 98       	cbi	0x05, 5	; 5
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	83 ec       	ldi	r24, 0xC3	; 195
  cc:	99 e0       	ldi	r25, 0x09	; 9
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x3e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x48>
  d8:	00 00       	nop
  da:	e7 cf       	rjmp	.-50     	; 0xaa <main+0x1a>

000000dc <__vector_3>:
			}
    }
}

ISR (PCINT0_vect) // Rutina de Servicio de Interrupción
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
	if(DES) osc_estado=desactivado;	// Es necesario individualizar bit porque ambos van al mismo vector,
  e8:	1c 9b       	sbis	0x03, 4	; 3
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <__vector_3+0x16>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(ACT) osc_estado=activado;	// y si es flanco subida (es decir, si actual vale 1)
  f2:	1b 99       	sbic	0x03, 3	; 3
  f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
